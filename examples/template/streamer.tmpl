<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Server Example</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .breadcrumbs { list-style-type: none; padding: 0; }
        .breadcrumbs li { display: inline; }
        .file-list { list-style-type: none; padding: 0; }
        .file-list li { margin: 5px 0; }
        .file-list a { text-decoration: none; color: #007BFF; }
        .file-list a:hover { text-decoration: underline; }
        .absolute { position: absolute; }
        .top-0 { top: 0; }
        .left-0 { left: 0; }
        .right-0 { right: 0; }
        .bottom-0 { bottom: 0; }
        .bg-white { background-color: #ffffff; }
        .block { display: block; }
        .inline-block { display: inline-block; }
        .cursor-pointer { cursor: pointer; }
        .w-full { width: 100%; }
        .h-vh { height: 100vh; }
        .text-right { text-align: right; }
        .align-top { vertical-align: top; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/hls.js@1"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/@alpinejs/focus@3.x.x/dist/cdn.min.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
<body>
    <h1>File Server Example</h1>
    {{- $trimmed := trimSuffix (trimPrefix .Path "/") "/" -}}
    {{- $breadCrumbs := split $trimmed "/" -}}
    {{- $path := "/" -}}
    <ul class="breadcrumbs">
    <li><a href="{{ $path }}">Home</a></li>
    {{- range $n, $v := $breadCrumbs -}}
    {{- $path = pathjoin $path $v -}}
    <li> / <a href="{{ $path }}{{ if not (hasSuffix $path "/") }}/{{ end }}">{{ $v }}</a></li>
    {{- end -}}
    </ul>
    <ul class="file-list">
        {{- range $n, $v := .FileList -}}
        {{- if and (eq $v.Name "images") (.IsDir) }}{{ continue }}{{ end -}}
        {{- if eq true (hasSuffix $v.Name "_2160p.m3u8") (hasSuffix $v.Name "_1080p.m3u8") (hasSuffix $v.Name "_720p.m3u8") (hasSuffix $v.Name ".ts") (hasSuffix $v.Name "_Original.svg") }}{{ continue }}{{ end -}}
        <li x-data="player('video{{ $n }}', '{{ $v.Name }}')">
            <a href="{{ $v.Name }}{{ if $v.IsDir }}/{{ end }}"{{ if not $v.IsDir }} @click.prevent="openPlayer"{{ end }}>{{ if $v.IsDir }} <img src="/images/folder.svg" alt="folder">{{ else }}<img src="/images/file-earmark.svg" alt="file">{{ end }} {{ $v.Name }}</a>
            <template x-teleport="body">
                <div class="absolute top-0 bottom-0 left-0 right-0 bg-white" x-show="open" x-trap.inert="open">
                    <video id="video{{ $n }}" class="h-vh" controls></video>
                    <img class="cursor-pointer align-top" src="/images/x-lg.svg" alt="Close" @click="closePlayer">
                </div>
            </template>
        </li>
        {{- end -}}
    </ul>
    <script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('player', (intialId, initialSrc) => ({
            id: intialId,
            video: null,
            src: `${window.location.toString()}${initialSrc}`,
            hls: null,
            open: false,
            openPlayer() {
                this.video = document.getElementById(this.id)
                this.open = true;
                
                if (Hls.isSupported()) {
                    var config = {
                        capLevelToPlayerSize: true,
                        debug: true,
                    };

                    this.hls = new Hls(config);

                    let hls = this.hls;
                    this.hls.on(Hls.Events.ERROR, function (event, data) {
                        if (data.fatal) {
                            switch (data.type) {
                            case Hls.ErrorTypes.MEDIA_ERROR:
                                console.log('fatal media error encountered, try to recover');
                                hls.recoverMediaError();
                                break;
                            case Hls.ErrorTypes.NETWORK_ERROR:
                                console.error('fatal network error encountered', data);
                                // All retries and media options have been exhausted.
                                // Immediately trying to restart loading could cause loop loading.
                                // Consider modifying loading policies to best fit your asset and network
                                // conditions (manifestLoadPolicy, playlistLoadPolicy, fragLoadPolicy).
                                break;
                            default:
                                // cannot recover
                                console.error('cannot recover', data);
                                break;
                            }
                        }
                    });

                    this.hls.loadSource(this.src);
                    this.hls.attachMedia(this.video);
                }
            },
            closePlayer() {
                this.open = false;
                if (this.hls !== null) {
                    this.hls.destroy();
                    this.hls = null;
                }
            },
        }));
    });
    </script>
</body>
</html>
